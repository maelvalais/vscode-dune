{
	"name": "Dune",
	"scopeName": "source.dune",
	"fileTypes": [
		"jbuild",
		"dune",
		"dune-project"
	],
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"name": "meta.stanza.dune",
			"begin": "\\(\\s*(lang|using|library|rule|executable|executables|rule|ocamllex|ocamlyacc|menhir|install|alias|copy_files|copy_files#|jbuild_version|include)\\s",
			"end": "\\)",
			"beginCaptures": {
				"1": {
					"name": "meta.class.stanza.dune"
				}
			},
			"patterns": [
				{
					"include": "$self"
				}
			]
		},
		{
			"name": "meta.stanza.library.field.dune",
			"begin": "\\(\\s*(name|public_name|synopsis|install_c_headers|ppx_runtime_libraries|c_flags|cxx_flags|c_names|cxx_names|library_flags|c_library_flags|virtual_deps|modes|kind|wrapped|optional|self_build_stubs_archive|no_dynlink|ppx\\.driver)\\s",
			"end": "\\)",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.dune"
				}
			},
			"patterns": [
				{
					"include": "$self"
				}
			]
		},
		{
			"name": "meta.stanza.rule.dune",
			"begin": "\\(\\s*(targets|deps|locks|loc|mode|action)\\s",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.dune"
				}
			},
			"end": "\\)",
			"patterns": [
				{
					"include": "$self"
				}
			]
		},
		{
			"name": "meta.mono-sexp.dune",
			"match": "\\(\\s*(fallback|optional)\\s*\\)",
			"captures": {
				"1": {
					"name": "keyword.other.dune"
				}
			}
		},
		{
			"name": "meta.stanza.rule.action.dune",
			"begin": "\\(\\s*(run|chdir|setenv|with-stdout-to|with-stderr-to|with-outputs-to|ignore-stdout|ignore-stderr|ignore-outputs|progn|echo|cat|copy|copy#|system|bash|write-file|diff|diff\\?)\\s",
			"end": "\\)",
			"beginCaptures": {
				"1": {
					"name": "entity.name.function.action.dune"
				}
			},
			"patterns": [
				{
					"include": "$self"
				}
			]
		},
		{
			"name": "meta.stanza.install.dune",
			"begin": "\\(\\s*(section)\\s",
			"end": "\\)",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.dune"
				}
			},
			"patterns": [
				{
					"name": "constant.language.rule.mode.dune",
					"match": "\\b(lib|libexec|bin|sbin|toplevel|share|share_root|etc|doc|stublibs|man|misc)\\b"
				}
			]
		},
		{
			"name": "meta.stanza.install.dune",
			"begin": "\\(\\s*(files)\\s",
			"end": "\\)",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.dune"
				}
			},
			"patterns": [
				{
					"include": "$self"
				}
			]
		},
		{
			"name": "meta.library.kind.dune",
			"begin": "\\(\\s*(normal|ppx_deriver|ppx_rewriter)\\s",
			"end": "\\)",
			"beginCaptures": {
				"1": {
					"name": "constant.language.rule.mode.dune"
				}
			}
		},
		{
			"name": "meta.stanza.executables.dune",
			"begin": "\\(\\s*(name|link_executables|link_flags|modes)\\s",
			"end": "\\)",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.dune"
				}
			},
			"patterns": [
				{
					"include": "$self"
				}
			]
		},
		{
			"name": "meta.stanza.lib-or-exec.buildable.dune",
			"begin": "\\(\\s*(preprocess|preprocessor_deps|lint|modules|modules_without_implementation|libraries|flags|ocamlc_flags|ocamlopt_flags|js_of_ocaml|allow_overlapping_dependencies|per_module)\\s",
			"end": "\\)",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.dune"
				}
			},
			"patterns": [
				{
					"include": "$self"
				}
			]
		},
		{
			"name": "meta.stanza.lib-or-exec.buildable.preprocess.dune",
			"begin": "\\(\\s*(no_preprocessing|action|pps)\\s",
			"end": "\\)",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.dune"
				}
			},
			"patterns": [
				{
					"include": "$self"
				}
			]
		},
		{
			"name": "meta.stanza.lib-or-exec.buildable.preprocess_deps.dune",
			"begin": "\\(\\s*(file|alias|alias_rec|glob_files|files_recursively_in)\\s",
			"end": "\\)",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.dune"
				}
			},
			"patterns": [
				{
					"include": "$self"
				}
			]
		},
		{
			"name": "meta.stanza.lib-or-exec.buildable.libraries.dune",
			"begin": "\\(\\s*(select)\\s",
			"end": "\\)",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.dune"
				}
			},
			"patterns": [
				{
					"include": "$self"
				}
			]
		},
		{
			"name": "constant.numeric.dune",
			"match": "\\b\\d+\\b"
		},
		{
			"name": "constant.language.dune",
			"match": "(true|false)"
		},
		{
			"name": "keyword.other.dune",
			"match": "\\s(as|from|->)\\s"
		},
		{
			"name": "keyword.other.dune",
			"match": "(\\!)"
		},
		{
			"name": "constant.language.flag.dune",
			"match": "(:\\w+)\\b"
		},
		{
			"name": "constant.language.rule.mode.dune",
			"match": "\\b(standard|fallback|promote|promote-until-then)\\b"
		},
		{
			"include": "#string"
		},
		{
			"include": "#variable"
		},
		{
			"include": "#list"
		},
		{
			"include": "#atom"
		}
	],
	"repository": {
		"comments": {
			"patterns": [
				{
					"name": "comment.block.dune",
					"begin": "#\\|",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.comment.begin.dune"
						}
					},
					"end": "\\|#",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.comment.end.dune"
						}
					},
					"patterns": [
						{
							"include": "#comments"
						}
					]
				},
				{
					"name": "comment.sexp.dune",
					"begin": "#;\\s*\\(",
					"end": "\\)",
					"patterns": [
						{
							"include": "#comment-inner"
						}
					]
				},
				{
					"name": "comment.line.dune",
					"match": ";.*$"
				}
			]
		},
		"comment-inner": {
			"patterns": [
				{
					"name": "comment.sexp.inner.dune",
					"begin": "\\(",
					"end": "\\)",
					"patterns": [
						{
							"include": "#comment-inner"
						}
					]
				}
			]
		},
		"string": {
			"patterns": [
				{
					"name": "string.quoted.double.dune",
					"begin": "(?=[^\\\\])(\")",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.string.begin.dune"
						}
					},
					"end": "(\")",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.string.end.dune"
						}
					},
					"patterns": [
						{
							"name": "constant.character.string.escape.dune",
							"match": "\\\\\""
						},
						{
							"include": "#variable"
						}
					]
				}
			]
		},
		"variable": {
			"patterns": [
				{
					"name": "variable.other.dune",
					"match": "\\${[^}]*}"
				}
			]
		},
		"list": {
			"patterns": [
				{
					"name": "meta.list.dune",
					"begin": "(\\()",
					"end": "(\\))",
					"captures": {
						"1": {
							"name": "entity.tag.list.parenthesis.dune"
						}
					},
					"comment": "ok, for this one, I didn't know what to choose",
					"patterns": [
						{
							"include": "$self"
						}
					]
				}
			]
		},
		"atom": {
			"patterns": [
				{
					"name": "meta.atom.dune",
					"match": "\\b[^\\s]+\\b"
				}
			]
		}
	}
}